//@version=5
indicator("Custom Range High/Low (Start + Duration)", overlay=true)

// === 🛠 User Inputs ===
startHour        = input.int(8, "Session Start Hour", minval=0, maxval=23)
startMinute      = input.int(0, "Session Start Minute", minval=0, maxval=59)
sessionLength    = input.int(90, "Session Duration (minutes)", minval=1, maxval=120)
plotUntilHour    = input.int(20, "Display Until Hour", minval=0, maxval=23)
plotUntilMinute  = input.int(0, "Display Until Minute", minval=0, maxval=59)

// === 🕐 Time Logic ===
currMinutes       = hour(time) * 60 + minute(time)
startMinutes      = startHour * 60 + startMinute
endMinutes        = startMinutes + sessionLength
plotUntilMinutes  = plotUntilHour * 60 + plotUntilMinute

inCalcRange       = currMinutes >= startMinutes and currMinutes < endMinutes
atEndOfRange      = currMinutes == endMinutes
inDisplayTime     = currMinutes >= endMinutes and currMinutes < plotUntilMinutes
afterDisplay      = currMinutes >= plotUntilMinutes
beforeSession     = currMinutes < startMinutes
newDay            = ta.change(dayofmonth(time)) != 0

// Timestamp-based limits to cut lines absolutely before 08:00 and after 20:00
startTime         = timestamp("America/New_York", year(time), month(time), dayofmonth(time), 8, 0)
openingRangeEnd   = timestamp("America/New_York", year(time), month(time), dayofmonth(time), startHour, startMinute) + sessionLength * 60 * 1000
endTime           = timestamp("America/New_York", year(time), month(time), dayofmonth(time), plotUntilHour, plotUntilMinute)

// === 📊 Session Data
var float sessionHigh = na
var float sessionLow = na
var float lockedHigh = na
var float lockedLow = na

// Reset at new day
if newDay
    sessionHigh := na
    sessionLow := na
    lockedHigh := na
    lockedLow := na

// Clear if outside display time
if afterDisplay or beforeSession
    lockedHigh := na
    lockedLow := na

// Accumulate High/Low
if inCalcRange and (time>=startTime and time<= openingRangeEnd)
    sessionHigh := na(sessionHigh) ? high : math.max(sessionHigh, high)
    sessionLow  := na(sessionLow)  ? low  : math.min(sessionLow, low)

// Lock values at end of session
if atEndOfRange
    lockedHigh := sessionHigh
    lockedLow := sessionLow
log.error("op high {0} opLow {1}",lockedHigh,lockedLow )
// === 📏 Final Plot: Only between session end and 8:00 PM
plot((inDisplayTime and time >= openingRangeEnd and time < endTime) ? lockedHigh : na, title="Session High", color=color.rgb(76, 84, 175), linewidth=1)
plot((inDisplayTime and time >= openingRangeEnd and time < endTime) ? lockedLow  : na, title="Session Low",  color=color.rgb(76, 84, 175), linewidth=1)
